
PIXEL_MAIN_BEGIN

  vec3 ambientFactor = vec3(0.3, 0.3, 0.3);  

  vec3 vN = normalize(inNormal);
  vec3 vT = normalize(inTangent - dot(inTangent, vN) * vN);
  vec3 vB = normalize(cross(inNormal, inTangent));
  mat3 mTBN = buildmat3(vT, vB, vN);

  vec3 vWN = sampleTex(Texture1, vec2(inUv.x, inUv.y)).rgb * 2.0 - 1.0;

  vWN = normalize(mul(mTBN, vWN)); 

  vec4 vAlbedo = sampleTex(Texture0, vec2(inUv.x, inUv.y));  

  vec3 vAtt = sampleTex(Texture2, vec2(inUv.x, inUv.y)).rgb;

  PBRinput pbrIn;
  pbrIn.normal = vec4(vWN, 0);
  pbrIn.viewDir = vec4(normalize(CameraPos - inWorldPos), 0);  
  pbrIn.albedo = vAlbedo;
  pbrIn.metalness = vAtt.b;
  pbrIn.roughness = vAtt.g;  
  pbrIn.reflectivity = 0.04;

  vec3 color = vec3(0,0,0);

  for (uint i = 0; i < DirLightCount; i++)
  {
    //vec4 vLightViewProjPos = mul(DirLightViewProj(i), vec4(inWorldPos, 1));

    pbrIn.lightDir = DirLightDir(i);
    pbrIn.halfVector = vec4(normalize(pbrIn.viewDir.xyz + pbrIn.lightDir.xyz), 0.0);
    pbrIn.lightColor = DirLightColor(i);// * ShadowFactor(vLightViewProjPos, i);

    color += PBR(pbrIn); 
  }

  pbrIn.lightDir = pbrIn.normal;
  pbrIn.halfVector = vec4(normalize(pbrIn.viewDir.xyz + pbrIn.lightDir.xyz), 0);
  pbrIn.lightColor = sampleTex(DiffEnvMap, -vec3(pbrIn.lightDir.x, pbrIn.lightDir.y, pbrIn.lightDir.z));

  vec3 diff = PBRDiffuseIrradiance(pbrIn);

  
  float lod = 5.f * pbrIn.roughness;
  pbrIn.lightDir = reflect(pbrIn.viewDir, pbrIn.normal);
  pbrIn.halfVector = normalize((pbrIn.viewDir + pbrIn.lightDir) * 0.5);
  pbrIn.lightColor = sampleTexLevel(SpecEnvMap, -vec3(pbrIn.lightDir.x, pbrIn.lightDir.y, pbrIn.lightDir.z), lod);

  vec3 spec = PBRSpecularIBL(pbrIn);
      
  outColor = vec4(color + diff + spec, 1); 
 
PIXEL_MAIN_END
 