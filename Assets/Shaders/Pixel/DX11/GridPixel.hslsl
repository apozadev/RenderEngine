#pragma pack_matrix( column_major )

struct VSout
{
	float4 pos : SV_Position;
	float2 uv : TEXCOORD;
	float3 normal : NORMAL;
};

SamplerState texSampler : register(s0);

#define vec2 float2
#define vec3 float3
#define vec4 float4

#define mat4 matrix

#define mul(mat, v) mul(mat, v)

#define sampleTex(tex, uv) tex.Sample(texSampler, uv)

#define Texture(name, set, bind) Texture2D name : register(t##bind);
#define PIXEL_MAIN_BEGIN \
  struct PS_OUTPUT  \
  { \
    float4 color: SV_Target0; \
  }; \
  PS_OUTPUT main(VSout i) { \
    PS_OUTPUT o;

#define PIXEL_MAIN_END  \
  return o; \
  } 

#define inPos     i.pos
#define inUv      i.uv
#define inNormal  i.normal

#define outColor  o.color

//#define ddx(x)	ddx(x)
//#define ddy(x)	ddy(x)

vec2 mod2(vec2 x, vec2 y)
{
  return x - y * floor(x / y);
}

PIXEL_MAIN_BEGIN

float scale = 99.0;
vec2 cellSize = vec2(1.0, 1.0) / scale;
vec2 halfCell = cellSize*0.5;
vec2 lineWidth = vec2(0.0001, 0.0001) / scale;

vec2 diff = fwidth(inUv);

float fade = length(diff) * scale * scale;

lineWidth += diff;

vec2 newUv = mod2(inUv, cellSize);

vec2 c = smoothstep(lineWidth, lineWidth*0.5, abs(newUv - halfCell));

float lineAlpha = max(min(c.x + c.y, 1) / fade, 0);

outColor = vec4(1, 1, 1, lineAlpha);

PIXEL_MAIN_END

