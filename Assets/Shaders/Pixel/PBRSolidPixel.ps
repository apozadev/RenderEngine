CBuffer(MatBuffer, 2)
{
  vec4 vAlbedo;
  float fMetalness;
  float fRoughness;
  float fReflectivity;
};

PIXEL_MAIN_BEGIN

  vec3 vCamPos = CameraPos;
  PBRinput pbrIn;
  pbrIn.normal = vec4(normalize(inNormal), 0);
  pbrIn.viewDir = vec4(normalize(vCamPos - inWorldPos), 0);  
  pbrIn.albedo = vAlbedo;
  pbrIn.metalness = fMetalness;
  pbrIn.roughness = fRoughness;  
  pbrIn.reflectivity = fReflectivity;

  vec3 color = vec3(0,0,0);

  for (uint i = 0; i < DirLightCount; i++)
  {
    vec4 vLightViewProjPos = mul(DirLightViewProj(i), vec4(inWorldPos, 1));

    pbrIn.lightDir = DirLightDir(i);
    pbrIn.halfVector = vec4(normalize(pbrIn.viewDir.xyz + pbrIn.lightDir.xyz), 0);
    pbrIn.lightColor = DirLightColor(i) * ShadowFactor(vLightViewProjPos, i);

    color += PBR(pbrIn); 

  }

  pbrIn.lightDir = pbrIn.normal;
  pbrIn.halfVector = vec4(normalize(pbrIn.viewDir.xyz + pbrIn.lightDir.xyz), 0);
  pbrIn.lightColor = sampleTex(DiffEnvMap, vec3(pbrIn.lightDir.x, -pbrIn.lightDir.y, pbrIn.lightDir.z));

  vec3 diff = PBRDiffuseIrradiance(pbrIn);

  float lod = 10.f * pbrIn.roughness;
  pbrIn.lightDir = reflect(pbrIn.viewDir, pbrIn.normal);
  pbrIn.halfVector = normalize((pbrIn.viewDir + pbrIn.lightDir) * 0.5);
  pbrIn.lightColor = sampleTexLevel(SpecEnvMap, vec3(pbrIn.lightDir.x, -pbrIn.lightDir.y, pbrIn.lightDir.z), lod);

  vec3 spec = PBRSpecularIBL(pbrIn);
    
  outColor = vec4(color + diff + spec, 1); 
  //outColor = pbrIn.lightColor; 
 
PIXEL_MAIN_END
 