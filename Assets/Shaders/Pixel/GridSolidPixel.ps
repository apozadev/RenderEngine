
CBuffer(MatBuffer, 2)
{
  vec4 vColor;
  float fMetalness;
  float fRoughness;
};

vec2 mod2(vec2 x, vec2 y)
{
  return x - y * floor(x / y);
}

PIXEL_MAIN_BEGIN

float scale = 99.0;
vec2 cellSize = vec2(1.0, 1.0) / scale;
vec2 halfCell = cellSize * 0.5;
vec2 lineWidth = vec2(0.01, 0.01) / scale;

vec2 diff = fwidth(inUv);

float fade = length(diff) * scale * scale;

lineWidth += diff * 0.8;

vec2 newUv = mod2(inUv, cellSize);

vec2 c = smoothstep(lineWidth, lineWidth * 0.5, abs(newUv - halfCell));

float lineAlpha = 1 - max(min(c.x + c.y, 1) / fade, 0);

outColor = vec4(0,0,0,1);

PBRinput pbrIn;
pbrIn.normal = vec4(inNormal, 0);
pbrIn.viewDir = vec4(normalize(CameraPos - inWorldPos), 0);  
pbrIn.albedo = vColor;
pbrIn.metalness = fMetalness;
pbrIn.roughness = fRoughness;  
pbrIn.reflectivity = 0;

for (uint i = 0; i < DirLightCount; i++)
{
  vec4 vLightViewProjPos = mul(DirLightViewProj(i), vec4(inWorldPos, 1));

  pbrIn.halfVector = normalize((pbrIn.viewDir + DirLightDir(i)) * 0.5);
  pbrIn.lightDir = DirLightDir(i);
  pbrIn.lightColor = DirLightColor(i) * ShadowFactor(vLightViewProjPos, i);

  outColor.xyz += PBR(pbrIn); 

}

outColor = outColor * vec4(lineAlpha, lineAlpha, lineAlpha, 1);

PIXEL_MAIN_END
